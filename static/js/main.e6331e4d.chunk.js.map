{"version":3,"sources":["Piece.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Piece","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","player","parsePlayer","token","piece","parsePiece","concat","react_default","a","createElement","id","data-piece","className","getPiece","selected","length","charAt","Component","Board","_this","state","selectedTile","board","rotate","_this2","charCode","charCodeAt","map","row","output","counter","tiles","tile","key","String","fromCharCode","src_Piece_0","push","event","target","closest","setState","targetLocation","parseRowCol","selectedLocation","col","onClick","handleClick","bind","drawBoard","apply","parseInt","App","parseBoard","parsedBoard","rows","split","splice","forEach","trim","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6331e4d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Piece.css';\n\nclass Piece extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static parsePlayer(token) {\n    if (typeof(token) !== 'string' && token.length !== 2) { return null; }\n\n    switch(token.charAt(0)) {\n        case 'B':\n          return 'black';\n        case 'W':\n          return 'white';\n        default:\n          return null;\n    }\n  }\n\n  static parsePiece(token) {\n      if (typeof(token) !== 'string' && token.length !== 2) { return null; }\n\n      switch(token.charAt(1)) {\n          case 'K':\n              return 'king';\n          case 'Q':\n              return 'queen';\n          case 'B':\n              return 'bishop';\n          case 'R':\n              return 'rook';\n          case 'N':\n              return 'knight';\n          case 'P':\n              return 'pawn';\n          default:\n              return null;\n      }\n  }\n\n  getPiece() {\n      let player = Piece.parsePlayer(this.props.token);\n      let piece = Piece.parsePiece(this.props.token);\n\n      return player && piece ? `${player} ${piece}` : '';\n  }\n\n  render() {\n    return (\n      <div id={this.props.id} data-piece={this.props.token} className={`tile ${this.getPiece()} ${this.props.selected ? 'selected' : ''}`}> </div>\n    );\n  }\n}\n\nexport default Piece;\n","import React, { Component } from 'react';\nimport Piece from './Piece';\nimport './Board.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedTile: null,\n            board: props.board,\n            rotate: false,\n        };\n    }\n\n    drawBoard() {\n        //Iterate over A->H to identify tiles (using ASCII char codes)\n        let charCode = 'A'.charCodeAt(0);\n        return this.state.board.map((row) => {\n            let output = [];\n            let counter = 0;\n\n            let tiles = row.map((tile) => {\n                let key = String.fromCharCode(charCode) + counter;\n                counter += 1;\n\n                let selected = this.state.selectedTile === key;\n                return <Piece id={key} key={key} token={tile} selected={selected} />;\n            });\n\n            output.push(<div key={String.fromCharCode(charCode)} className=\"row\">{tiles}</div>);\n\n            charCode += 1;\n            return output;\n        });\n    }\n\n    static parseRowCol(token) {\n        let row = token.charCodeAt(0) - 'A'.charCodeAt(0);\n        let col = parseInt(token.charAt(1));\n\n        return {row, col};\n    }\n\n    handleClick(event) {\n        let target = event.target.closest('.tile');\n\n        if (this.state.selectedTile === null) {\n            this.setState({selectedTile: target.id});\n        } else if (this.state.selectedTile !== target.id) {\n            let targetLocation = Board.parseRowCol(target.id);\n            let selectedLocation = Board.parseRowCol(this.state.selectedTile);\n\n            let board = this.state.board;\n\n            if (!!board[selectedLocation.row][selectedLocation.col]) {\n                board[targetLocation.row][targetLocation.col] = board[selectedLocation.row][selectedLocation.col];\n                board[selectedLocation.row][selectedLocation.col] = '';\n\n                this.setState({\n                    selectedTile: null,\n                    board: board,\n                    rotate: !this.state.rotate,\n                });\n            } else {\n                this.setState({\n                    selectedTile: null,\n                })\n            }\n        } else {\n            this.setState({\n                selectedTile: null,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className={`board ${this.state.rotate ? 'rotate' : ''}`}\n                 onClick={this.handleClick.bind(this)}>\n                {this.drawBoard.apply(this)}\n            </div>\n        )\n    }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    /* Set up the inital board state -- B / W for Black and White\n     * K = King, Q = Queen, B = Bishop, N = Knight, R = Rook, P = Pawn\n     */\n    let board = `\n    BR,BN,BB,BQ,BK,BB,BN,BR;\n    BP,BP,BP,BP,BP,BP,BP,BP;\n    ,,,,,,,;\n    ,,,,,,,;\n    ,,,,,,,;\n    ,,,,,,,;\n    WP,WP,WP,WP,WP,WP,WP,WP;\n    WR,WN,WB,WQ,WK,WB,WN,WR;\n    `;\n\n    this.state = {board: this.parseBoard(board)}\n  }\n\n  parseBoard(board) {\n    let parsedBoard = [];\n\n    let rows = board.split(';');\n    rows.splice(rows.length-1, 1); //the final ; creates an off-by-one error, so remove the last element\n\n    //Split the rows, and trim the results\n    rows.forEach(function(row) {\n      let tiles = row.split(',');\n      tiles = tiles.map((tile) => tile.trim());\n\n      parsedBoard.push(tiles)\n    });\n\n    return parsedBoard;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Board board={this.state.board} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}